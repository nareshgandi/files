https://chatgpt.com/share/672baf26-7cc0-8012-9c7a-08407c6257f0
https://chatgpt.com/share/672cdb3c-2fe8-8003-a566-c0a4d1c7ee23


apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgresql-replica
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgresql-replica
  template:
    metadata:
      labels:
        app: postgresql-replica
    spec:
      containers:
        - name: postgres
          image: postgres:14
          env:
            - name: POSTGRES_USER
              value: "postgres"
            - name: POSTGRES_PASSWORD
              value: "postgres"  # Replace with your actual replica password
            - name: POSTGRES_DB
              value: "ps_db"
            - name: PGDATA
              value: "/var/lib/postgresql/data"
            - name: PRIMARY_HOST
              value: "postgresql"  # Service name of primary
          ports:
            - containerPort: 5432
          volumeMounts:
            - name: postgresql-data
              mountPath: /var/lib/postgresql/data
          lifecycle:
            postStart:
              exec:
                command: 
                  - sh
                  - -c
                  - |
                    if [ ! -f /var/lib/postgresql/data/standby.signal ]; then
                      echo "Replication setup started";
                      until pg_basebackup -h ${POSTGRES_PRIMARY_HOST}  -D /var/lib/postgresql/data -Fp -Xs -P -R -W; do
                        echo "Waiting for primary to be ready...";
                        sleep 10;
                      done
                      echo "Replication setup complete";
                    else
                      echo "Standby already initialized. Skipping pg_basebackup.";
                    fi
      initContainers:
        - name: pg-basebackup
          image: postgres:14
          command:
            - /bin/bash
            - -c
            - |
              echo "Cleaning up data directory before replication...";
              rm -rf /var/lib/postgresql/data/*;
              echo "Starting pg_basebackup from primary...";
              until pg_basebackup -U postgres -D /var/lib/postgresql/data2 -h 10.244.0.12 --checkpoint=fast -R; do
                echo "Retrying pg_basebackup in 10 seconds...";
                sleep 10;
              done
              echo "pg_basebackup complete";
          env:
            - name: PGPASSWORD
              value: "your_replica_password"  # Replica password for primary connection
          volumeMounts:
            - name: postgresql-data
              mountPath: /var/lib/postgresql/data
      volumes:
        - name: postgresql-data
          emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: postgresql-replica
spec:
  type: LoadBalancer
  selector:
    app: postgresql-replica
  ports:
    - port: 5432
      targetPort: 5432




Instructions 
============
1. Using Minikube, deploy a small Kubernetes cluster in your local environment. This won’t require a lot of resources, 2 CPU 2 GB RAM and 20GB disk space will do. 
2. Using Helm Chart, deploy a PostgreSQL database cluster with a load balancer. 
3. You are not limited to the number of nodes in the cluster, decide on the number based on your machine’s resource availability. 
4. You are not limited to the specs for the nodes e.g mem, storage, vCPU. Decide on the number based on your machine’s resource availability. 
5. Develop a script/code to create a simple database with two related tables using a foreign key. 
6. Using the Faker library, or any other random data generation library you are familiar with, insert 100,000 records into the two tables. 
7. Using Helm Chart still, deploy a standalone PostgreSQL database, then setup an async replication from your cluster to this standalone database. 
8. Push your codes to Github. 
Expected deliverables 
1. An architectural diagram showing your solution architecture, together with documentation. 
2. A Git repo containing Helm Charts and codes/scripts to deploy a PostgreSQL database cluster with a load balancer, and schema/tables/records. Senior Database Administrator Assignment 1 
3. PostgreSQL database cluster with a load balancer, and schema/tables/records. 
4. The standalone replica database needs to be in sync with the main cluster showing the replicated records. 
Note 
1. Use only open source tools for this assignment. 
