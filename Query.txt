hrtest=>  call aws_oracle_ext.dbms_output$put_line('Hello world');
CALL

hrtest=> \sf get_employee_data
CREATE OR REPLACE PROCEDURE hr.get_employee_data()
 LANGUAGE plpgsql
AS $procedure$
/* Declare variables to hold employee data */
DECLARE
    v_employee_id hr.employees.employee_id%TYPE;
    v_first_name hr.employees.first_name%TYPE;
    v_last_name hr.employees.last_name%TYPE;
    v_email hr.employees.email%TYPE;
    emp_rec RECORD;
BEGIN
    /* Open the cursor */
    FOR emp_rec IN
    SELECT
        *
        FROM hr.employees
        WHERE employee_id = 100
    LOOP
        /* Fetch data from the cursor */
        v_employee_id := emp_rec.employee_id;
        v_first_name := emp_rec.first_name;
        v_last_name := emp_rec.last_name;
        v_email := emp_rec.email;
        /* Process or display the fetched data (you can modify this part based on your requirements) */
        CALL aws_oracle_ext.dbms_output$put_line(a => CONCAT_WS('', 'Employee ID: ', v_employee_id, ', Name: ', v_first_name, ' ', v_last_name, ', Email: ', v_email));
    END LOOP;
/* Close the cursor (implicitly done when the loop finishes) */
END;
$procedure$

wget https://dali.bo/tp_cave
psql
create user caviste with password 'caviste';
pg_restore -d demo tp_cave

wget https://dali.bo/tp_magasin   --no-check-certificate
pg_restore -d postgres  tp_magasin

explain analyze
SELECT
m.annee||' - '||a.libelle as millesime_region,
sum(s.nombre) as contenants,
sum(s.nombre*c.contenance) as litres
FROM
contenant c
JOIN stock s
ON s.contenant_id = c.id
JOIN (SELECT round(random()*0)+1950 AS annee) m
ON s.annee = m.annee
JOIN vin v
ON s.vin_id = v.id
LEFT JOIN appellation a
ON v.appellation_id = a.id
GROUP BY m.annee||' - '||a.libelle;

explain analyze
SELECT
s.annee||' - '||a.libelle AS millesime_region,
sum(s.nombre) AS contenants,
sum(s.nombre*c.contenance) AS litres
FROM
contenant c
JOIN stock s
ON s.contenant_id = c.id
JOIN vin v
ON s.vin_id = v.id
LEFT join appellation a
ON v.appellation_id = a.id
WHERE s.annee = 1950
GROUP BY s.annee||' - '||a.libelle;


explain analyze
SELECT
s.annee||' - '||a.libelle AS millesime_region,
sum(s.nombre) AS contenants,
sum(s.nombre*c.contenance) AS litres
FROM
contenant c
JOIN stock s
ON s.contenant_id = c.id
JOIN vin v
ON s.vin_id = v.id
join appellation a
ON v.appellation_id = a.id
WHERE s.annee = 1950
GROUP BY s.annee||' - '||a.libelle;

+++

SET search_path TO magasin,facturation ;
SET max_parallel_workers_per_gather TO 0; 
SET jit TO off ;

SELECT SUM (reglements.montant) AS somme_reglements
FROM factures
INNER JOIN reglements USING (numero_facture)
INNER JOIN commandes USING (numero_commande)
INNER JOIN clients cl USING (client_id)
INNER JOIN types_clients USING (type_client)
INNER JOIN lignes_commandes lc USING (numero_commande)
INNER JOIN lots l ON (l.numero_lot = lc.numero_lot_expedition)
INNER JOIN transporteurs USING (transporteur_id)
INNER JOIN contacts ct ON (ct.contact_id = cl.contact_id)
WHERE transporteurs.nom = 'Royal Air Drone'
AND login = 'Beatty_Brahem' ;
SHOW join_collapse_limit ;

++++


Query 1

SELECT
s.annee||' - '||a.libelle AS millesime_region,
sum(s.nombre) AS contenants,
sum(s.nombre*c.contenance) AS litres
FROM
contenant c
JOIN stock s
ON s.contenant_id = c.id
JOIN vin v
ON s.vin_id = v.id
LEFT join appellation a
ON v.appellation_id = a.id
WHERE s.annee = (SELECT round(random()*50)+1950 AS annee)
GROUP BY s.annee||' - '||a.libelle;

Query 2

SELECT
s.annee||' - '||a.libelle AS millesime_region,
sum(s.nombre) AS contenants,
sum(s.nombre*c.contenance) AS litres
FROM
contenant c
JOIN stock s
ON s.contenant_id = c.id
JOIN vin v
ON s.vin_id = v.id
JOIN appellation a
ON v.appellation_id = a.id
WHERE s.annee = (SELECT round(random()*50)+1950 AS annee)
GROUP BY s.annee||' - '||a.libelle;

what is the difference between above two queries and which runs fast?

\pset pager off

EXPLAIN (ANALYZE, COSTS OFF)
SELECT SUM (reglements.montant) AS somme_reglements
FROM factures
INNER JOIN reglements USING (numero_facture)
INNER JOIN commandes USING (numero_commande)
INNER JOIN clients cl USING (client_id)
INNER JOIN types_clients USING (type_client)
INNER JOIN lignes_commandes lc USING (numero_commande)
INNER JOIN lots l ON (l.numero_lot = lc.numero_lot_expedition)
INNER JOIN transporteurs USING (transporteur_id)
INNER JOIN contacts ct ON (ct.contact_id = cl.contact_id)
WHERE transporteurs.nom = 'Royal Air Drone'
AND login = 'Beatty_Brahem' ;

SET max_parallel_workers_per_gather TO 0;
SET join_collapse_limit TO 9 ;

cost = blocks * seq_page_cost + number_of_records * cpu_tuple_cost

explain analyze 
SELECT 
  e.matricule, 
  e.nom, 
  e.prenom 
FROM 
  employes e 
WHERE 
  e.num_service in (
    select 
      num_service 
    from 
      employes e 
    where 
      e.num_service = 4
  );

SELECT e.matricule, e.nom, e.prenom
FROM employes e
LEFT JOIN services s
ON (e.num_service = s.num_service)
WHERE e.num_service = 4 ;

SELECT e.matricule, e.nom, e.prenom
FROM employes e
LEFT JOIN services s
ON (e.num_service = s.num_service)
WHERE s.num_service = 4;

SELECT e.matricule, e.nom, e.prenom FROM employes e  WHERE e.num_service =4 ;

SELECT e.matricule, e.nom, e.prenom FROM employes e  WHERE e.num_service in (select num_service from employes e where e.num_service=4);

WITH service_employees AS (
    SELECT num_service
    FROM employes
    WHERE num_service = 4
)
SELECT e.matricule, e.nom, e.prenom
FROM employes e
WHERE e.num_service IN (SELECT num_service FROM service_employees);

+++

EXPLAIN
SELECT matricule, nom, prenom, nom_service, fonction, localisation
FROM employes emp
JOIN services ser ON (emp.num_service = ser.num_service)
WHERE ser.localisation = 'Nantes';

+++

EXPLAIN
WITH e AS ( SELECT * FROM employes WHERE num_service = 4 )
SELECT MAX(date_embauche)
FROM e
WHERE e.date_embauche < '2006-01-01';

EXPLAIN
SELECT *
FROM employes emp
JOIN (SELECT * FROM services WHERE num_service = 1) ser
ON (emp.num_service = ser.num_service) ;

++++
sudo iotop -oP
sar -p -d -b 1

++++

EXPLAIN (ANALYZE, COSTS OFF)
SELECT SUM (reglements.montant) AS somme_reglements
FROM factures
INNER JOIN reglements USING (numero_facture)
INNER JOIN commandes USING (numero_commande)
INNER JOIN clients cl USING (client_id)
INNER JOIN types_clients USING (type_client)
INNER JOIN lignes_commandes lc USING (numero_commande)
INNER JOIN lots l ON (l.numero_lot = lc.numero_lot_expedition)
INNER JOIN transporteurs USING (transporteur_id)
INNER JOIN contacts ct ON (ct.contact_id = cl.contact_id)
WHERE transporteurs.nom = 'Royal Air Drone'
AND login = 'Beatty_Brahem' ;

